---
# file: shorewall/tasks/ubuntu_12.04.yml

# Ensure for our directories on our (local) controller.

- name: ensure for directories
  become: false
  local_action: file
    path='{{ item.path }}'
    state=directory
  with_items:
    - { path: "{{ shorewall_fetched_files_root }}" }
    - { path: "{{ shorewall_fetched_files_history_root }}" }
    - { path: "{{ shorewall_fetched_files_original_root }}" }
    - { path: "{{ shorewall_fetched_files_previous_root }}" }

# apt update cache

- name: update apt cache
  become: true
  apt: update_cache=yes cache_valid_time=43200
  tags: [ 'packages', 'shorewall' ]

# ensure shorewall installed

- name: install shorewall
  become: true
  apt: name=shorewall state=installed
  tags: [ 'packages', 'shorewall' ]

# Originals
## Save original files if we have not already

- name: 'Do we have an original file in {{ shorewall_fetched_files_original_root }}/{{ ansible_hostname }}? '
  become: false
  local_action: stat path={{ shorewall_fetched_files_original_root }}/{{ ansible_hostname }}/etc/shorewall/zones
  register: stat_shorewall_originals
  tags: [ 'packages', 'shorewall', 'originals' ]

- debug: var=stat_shorewall_originals.stat.exists

- name: "backup our shorewall originals"
  fetch:
    src='{{ item.value.dest }}'  
    dest='{{ shorewall_fetched_files_original_root }}'
    flat=no
  with_dict: "{{ shorewall_config_files }}"
  when: stat_shorewall_originals.stat.exists != true
  tags: [ 'packages', 'shorewall', 'backup' ]

# Previous
## Backup the current configuration and overwrite the last one.

- name: "backup our current shorewall to previous"
  fetch:
    src='{{ item.value.dest }}'
    dest='{{ shorewall_fetched_files_previous_root }}'
    flat=no
  with_dict: "{{ shorewall_config_files }}"
  tags: [ 'packages', 'shorewall', 'backup' ]

# History
## Backup our current configuration to our history archive

- name: "backup our current shorewall to our history archive"
  fetch:
    src='{{ item.value.dest }}'
    dest='{{ shorewall_fetched_files_history_root }}'
    flat=no
  with_dict: "{{ shorewall_config_files }}"
  tags: [ 'packages', 'shorewall', 'backup' ]

# template our shorewall files

- name: "running our templates and generate our configuration files"
  become: true
  template:
    backup=yes
    src='{{ ansible_distribution }}/{{ ansible_distribution_version }}/{{ item.value.src }}.j2'
    dest='{{ item.value.dest }}'
    owner='{{ item.value.owner }}'
    group='{{ item.value.group }}'
    mode='{{ item.value.mode }}'
  with_dict: "{{ shorewall_config_files }}"
  notify: 
  - restart shorewall
  tags: [ 'packages', 'shorewall', 'configure' ]

# Ensure shorewall service is started and enabled

- name: enable shorewall
  become: true
  service: name=shorewall state=started enabled=yes
  tags: [ 'packages', 'shorewall' ]

